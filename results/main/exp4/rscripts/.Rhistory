m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .99,max_treedepth=15))
set_prior(normal(), class = "b")
set_prior(normal(0,10), class = "b")
set_prior("normal(0,10)", class = "b")
# set some priors
prior <- c(set_prior("normal(0,10)", class = "b"))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta(),
prior = prior)
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors <- dplyr::mutate(
priors,
prior = ifelse(str_detect(coef, ":"), "normal(0, 1)", prior)
)
priors <- dplyr::mutate(
prior,
prior = ifelse(str_detect(coef, ":"), "normal(0, 1)", prior)
)
priors
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors <- dplyr::mutate(
prior,
prior = "normal(0, 1)")
priors
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta(),
prior = priors)
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors <- dplyr::mutate(
prior,
prior = ifelse(class == b, "normal(0, 1)", prior)
)
priors
priors <- dplyr::mutate(
prior,
prior = ifelse(class == "b", "normal(0, 1)", prior)
)
priors
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta(),
prior = priors)
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors_mixed = c(set_prior('normal(0,10)', class = 'b'))
priors = c(set_prior('normal(0,10)', class = 'b'))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta(),
prior = priors)
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
prior = priors,
family = Beta())
priors = c(set_prior('normal(0,10)', class = 'b'))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
prior = priors,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .97,max_treedepth=15))
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors = c(set_prior('normal(0,4)', class = 'b'))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
prior = priors,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .97,max_treedepth=15))
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
priors = c(set_prior('normal(0,10)', class = 'b'))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
prior = priors,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .97,max_treedepth=15))
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
source('../../../helpers.R')
theme_set(theme_bw())
# read in the raw data
d = read_csv("../data/combined.csv")
# remove rows with info about instructions and final screens
d <- d %>% filter(!(trial_type %in% c("survey-text", "html-button-response")))
# replace participant_id by random number
length(unique(d$participant_id)) #80
d$participantID <- match(d$participant_id, unique(sort(d$participant_id)))
table(d$participantID)
# how many participants?
length(unique(d$participantID)) #80
# select relevant columns
d = d %>%
select(c(stimulus, response, trial_index, trial_type, participantID))
# unpack demographics info
dg <- d %>%
filter(trial_type == "survey") %>%
select(c(participantID,response))
table(dg$response)
# age
dg$age = as.numeric(gsub("\\D", "", dg$response))
table(dg$age) #19-67
mean(dg$age)
# gender
dg$gender = case_when(grepl("female", dg$response) ~ "female",
grepl("male", dg$response) ~ "male",
grepl("non-binary", dg$response) ~ "non-binary",
TRUE ~ "preferNoToSay")
table(dg$gender) #female 48, male 30, non-binary 2
# language
dg$language = case_when(grepl("language\":\"yes", dg$response) ~ "English",
TRUE ~ "notSpeakerOfEnglish")
table(dg$language)
# American English
dg$amE = case_when(grepl("amE\":\"yes", dg$response) ~ "AmE",
TRUE ~ "notAmE")
table(dg$amE)
# comments
dg$comments = gsub(".*comments", "", dg$response)
table(dg$comments)
# remove response column from demographics data
dg = dg %>%
select(-c(response))
summary(dg)
# add demographics data back to data
d = left_join(d, dg, by = "participantID")
# remove unneeded columns from data
d = d %>%
filter(trial_type != "survey") %>%
select(-c(stimulus))
d = d %>%
select(-c(trial_index,trial_type))
#separate the statement and dissent within the response
d = d %>%
separate(col = response,
into = c("statement", "dissent"),
sep = "</em><br><br><b>")
# create expression column
d$expression <- case_when(
grepl("is right", d$statement) ~ "be right",
grepl("knows", d$statement) ~ "know",
grepl("discovered", d$statement) ~ "discover",
grepl("confirmed", d$statement) ~ "confirm",
grepl("confessed", d$statement) ~ "confess",
grepl("French course", d$statement) ~ "controlGood",
grepl("has a cat", d$statement) ~ "controlBad",
grepl("police found|criticized|manager|forgave|chef|boss|neighbor", d$statement) ~ "fnrrc",
grepl("ran away|feels guilty|caught by the police|sweet tooth|apologized|feels upset|driver's license", d$statement) ~ "mnrrc",
TRUE ~ "ERROR"
)
table(d$expression)
# create choice column "yes, and" / "yes, but" / "no"
d$choice <- case_when(
grepl("Yes, and", d$dissent) ~ "Yes, and",
grepl("Yes, but", d$dissent) ~ "Yes, but",
grepl("No,", d$dissent) ~ "No,",
TRUE ~ "ERROR"
)
table(d$choice)
# create choice column "yes, and" / "yes, but" / "no"
d$choice <- case_when(
grepl("Yes, and", d$dissent) ~ "Yes, and",
grepl("Yes, but", d$dissent) ~ "Yes, but",
grepl("No,", d$dissent) ~ "No",
TRUE ~ "ERROR"
)
table(d$choice)
# add nResponse column (numeric variant of yes/no response)
d = d %>%
mutate(nResponse = ifelse(choice == "No,", 1, 0))
table(d$nResponse)
# Exp4 Yes, but diagnostic
# preprocessing.R
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
source('../../../helpers.R')
theme_set(theme_bw())
# read in the raw data
d = read_csv("../data/combined.csv")
# remove rows with info about instructions and final screens
d <- d %>% filter(!(trial_type %in% c("survey-text", "html-button-response")))
# replace participant_id by random number
length(unique(d$participant_id)) #80
d$participantID <- match(d$participant_id, unique(sort(d$participant_id)))
table(d$participantID)
# how many participants?
length(unique(d$participantID)) #80
# select relevant columns
d = d %>%
select(c(stimulus, response, trial_index, trial_type, participantID))
# unpack demographics info
dg <- d %>%
filter(trial_type == "survey") %>%
select(c(participantID,response))
table(dg$response)
# age
dg$age = as.numeric(gsub("\\D", "", dg$response))
table(dg$age) #19-67
mean(dg$age)
# gender
dg$gender = case_when(grepl("female", dg$response) ~ "female",
grepl("male", dg$response) ~ "male",
grepl("non-binary", dg$response) ~ "non-binary",
TRUE ~ "preferNoToSay")
table(dg$gender) #female 48, male 30, non-binary 2
# language
dg$language = case_when(grepl("language\":\"yes", dg$response) ~ "English",
TRUE ~ "notSpeakerOfEnglish")
table(dg$language)
# American English
dg$amE = case_when(grepl("amE\":\"yes", dg$response) ~ "AmE",
TRUE ~ "notAmE")
table(dg$amE)
# comments
dg$comments = gsub(".*comments", "", dg$response)
table(dg$comments)
# remove response column from demographics data
dg = dg %>%
select(-c(response))
summary(dg)
# add demographics data back to data
d = left_join(d, dg, by = "participantID")
#view(d)
# remove unneeded columns from data
d = d %>%
filter(trial_type != "survey") %>%
select(-c(stimulus))
d = d %>%
select(-c(trial_index,trial_type))
#separate the statement and dissent within the response
d = d %>%
separate(col = response,
into = c("statement", "dissent"),
sep = "</em><br><br><b>")
#view(d)
# create expression column
d$expression <- case_when(
grepl("is right", d$statement) ~ "be right",
grepl("knows", d$statement) ~ "know",
grepl("discovered", d$statement) ~ "discover",
grepl("confirmed", d$statement) ~ "confirm",
grepl("confessed", d$statement) ~ "confess",
grepl("French course", d$statement) ~ "controlGood",
grepl("has a cat", d$statement) ~ "controlBad",
grepl("police found|criticized|manager|forgave|chef|boss|neighbor", d$statement) ~ "fnrrc",
grepl("ran away|feels guilty|caught by the police|sweet tooth|apologized|feels upset|driver's license", d$statement) ~ "mnrrc",
TRUE ~ "ERROR"
)
table(d$expression)
# create choice column "yes, and" / "yes, but" / "no"
d$choice <- case_when(
grepl("Yes, and", d$dissent) ~ "Yes, and",
grepl("Yes, but", d$dissent) ~ "Yes, but",
grepl("No,", d$dissent) ~ "No",
TRUE ~ "ERROR"
)
table(d$choice)
# add nResponse column (numeric variant of yes/no response)
d = d %>%
mutate(nResponse = ifelse(choice == "No,", 1, 0))
table(d$nResponse)
# add nResponse column (numeric variant of yes/no response)
d = d %>%
mutate(nResponse = ifelse(choice == "No", 1, 0))
table(d$nResponse)
# add nResponse column (numeric variant of yes/no response)
# no = at-issue (0), yes = not-at-issue (1)
d = d %>%
mutate(nResponse = ifelse(choice == "No", 0, 1))
table(d$nResponse)
table(d$choice)
table(d$nResponse)
# item
d$cc = case_when(grepl("saw the murder", d$statement) ~ "saw the murder",
grepl("cheated on his wife", d$statement) ~ "cheated on his wife",
grepl("stole the money", d$statement) ~ "stole the money",
grepl("ate the last cupcake", d$statement) ~ "ate the last cupcake",
grepl("broke the plate", d$statement) ~ "broke the plate",
grepl("lost his key", d$statement) ~ "lost his key",
grepl("bought a new car", d$statement) ~ "bought a new car",
grepl("French course", d$statement) ~ "control",
grepl("has a cat",d$statement) ~ "control",
TRUE ~ "ERROR")
table(d$cc)
# remove statement and dissent columns
d = d %>%
select(-c(statement,dissent))
# check that all predicates and all contents are being presented to participants
table(d$expression)
table(d$cc)
table(d$expression, d$cc)
# participant info
table(d$age) #19-67
length(which(is.na(d$age))) # 0 missing values
mean(d$age,na.rm=TRUE) #37.99
d %>%
select(gender, participantID) %>%
unique() %>%
group_by(gender) %>%
summarize(count=n())
### exclude non-English speakers and non-American English speakers
# exclude non-English speakers
length(which(is.na(d$language))) #no missing responses
table(d$language)
d <- d %>%
filter(language != "notSpeakerOfEnglish") %>%  droplevels()
length(unique(d$participantID)) #78 #2 participants excluded
# exclude non-American English speakers
length(which(is.na(d$amE)))
table(d$amE)
d <- d %>%
filter(amE != "notAmE") %>%  droplevels()
length(unique(d$participantID)) #76 # 2 participants excluded
# exclude participants based on controls
names(d)
table(d$expression)
# plot response by type of control
ggplot(data=d[d$expression == "controlGood",], aes(x=participantID, y=nResponse)) +
geom_point()
# some got the good control wrong
ggplot(data=d[d$expression == "controlBad",], aes(x=participantID, y=nResponse)) +
geom_point()
# good control
goodControl = d %>%
filter(expression == "controlGood")
nrow(goodControl) #76 participants
# identify participants who didn't respond "no/0" to the good control
outliers.good = goodControl[goodControl$nResponse != 0,]
nrow(outliers.good)
# bad control
badControl = d %>%
filter(expression == "controlBad")
nrow(badControl) #76 participants
# identify participants whose response to the bad control is more than 2sd higher than the mean
outliers.bad = badControl[badControl$nResponse == 0,]
nrow(outliers.bad)
# remove the participants who got either one of the controls wrong
d = d %>%
filter(!(participantID %in% outliers.good$participantID)) %>%
filter(!(participantID %in% outliers.bad$participantID))
length(unique(d$participantID)) # 72 (so 4 participants excluded)
# adjust the names of the expressions
d = d %>%
mutate(expression = recode(expression, "right" = "be right", "controlBad" = "NAI MC", "controlGood" = "AI MC",
"mnrrc" = "medial NRRC", "fnrrc" = "final NRRC"))
# participant info
table(d$age) #19-67
length(which(is.na(d$age))) # 0 missing values
mean(d$age) #38.47
d %>%
select(gender, participantID) %>%
unique() %>%
group_by(gender) %>%
summarize(count=n())
nrow(d)
write_csv(d, file="../data/cd.csv")
nrow(d)
write_csv(d, file="../data/cd.csv")
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #72 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(nResponse), CILow = ci.low(nResponse), CIHigh = ci.high(nResponse)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=d, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" choice \n \"yes, but\" diagnostic") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=t, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" choice \n (higher response = more not-at-issue") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=t, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" (0) choice \n (higher response = more not-at-issue") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=t, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" choice \n (higher response = more not-at-issue") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# load required packages
library(tidyverse)
library(tidybayes)
library(brms)
library(emmeans)
library(lme4)
library(lmerTest)
library(xtable)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load helper functions
source('../../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #69 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# set reference level
t = t %>%
mutate(expression = fct_relevel(expression, "be right"))
levels(t$expression)
# response distribution before transformation
summary(t$response)
m.b <- brm(nResponse ~ expression + (1|participantID) + (1|cc),
data = t,
family = bernoulli(),
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .95,max_treedepth=15))
m.b <- brm(nResponse ~ expression + (1|participantID) + (1|cc),
data = t,
family = bernoulli())
m.b <- brm(nResponse ~ expression + (1|participantID) + (1|cc),
data = t,
family = bernoulli(),
iter = 1000,
refresh =0)
# model summary
summary(m.b)
