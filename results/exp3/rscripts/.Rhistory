library('brms')
data('kidney', package = 'brms')
head(kidney, n = 3)
fit1 <- brm(formula =  time | cens(censored) ~ age * sex + disease + (1 * age | patient),
data = kidney, family = lognormal(), prior = c(set_prior("normal(0.5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4)
View(kidney)
fit1 <- brm(formula =  time | cens(censored) ~ age * sex + disease + (1 * age | patient),
data = kidney, family = lognormal(), prior = c(set_prior("normal(0.5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4)
fit1 <- brm(formula =  time | cens(censored) ~ age * sex + disease + (1 * age | patient),
data = kidney, family = lognormal(), prior = c(set_prior("normal(0.5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd")),
warmup = 1000, iter = 2000, chains = 4)
fit1 <- brm(formula =  time | cens(censored) ~ age * sex + disease + (1 * age | patient),
data = kidney, family = lognormal(),
warmup = 1000, iter = 2000, chains = 4)
View(kidney)
View(kidney)
View(kidney)
fit1 <- brm(formula =  censored ~ age * sex + disease + (1 * age | patient),
data = kidney, family = bernoulli(link = logit),
warmup = 1000, iter = 2000, chains = 4)
)
fit1 <- brm(formula =  censored ~ age * sex + disease + (1 * age | patient),
data = kidney, family = bernoulli(link = logit),
warmup = 1000, iter = 2000, chains = 4)
library('brms')
data('kidney', package = 'brms')
head(kidney, n = 3)
fit1 <- brm(formula =  censored ~ age * sex + disease + (1 * age | patient),
data = kidney, family = bernoulli(link = logit),
warmup = 1000, iter = 2000, chains = 4)
# Sample sizes
var_size <- 10000
sim_size <- 100000
sample_size <- 100
# multinomial parameters
k <- 5
ratings1 <- rmultinom(var_size, k)
# Set parameters to generate log-normally distributed variables
muX <- 0
sdX <- 1
muY <- 0
sdY <- 0.25
muZ <- 0
sdZ <- 0.5
# Sample sizes
var_size <- 10000
sim_size <- 100000
sample_size <- 100
# Simulate random variables
X <- exp(rnorm(var_size,muX,sdX))
Y <- exp(rnorm(var_size,muY,sdY))
Z <- exp(rnorm(var_size,muZ,sdZ))
# Plot pdf for three different parameters
hist(X, breaks = var_size/50)
hist(Y, breaks = var_size/50)
hist(Z, breaks = var_size/50)
# Plot pdf for three different parameters
hist(X, breaks = var_size/50)
hist(Y, breaks = var_size/50)
# Plot pdf for three different parameters
hist(X, breaks = var_size/50)
hist(Y, breaks = var_size/50)
hist(Z, breaks = var_size/50)
# Set parameters to generate log-normally distributed variables
muX <- 0
sdX <- 1
muY <- 1.2
sdY <- 0.25
muZ <- 3
sdZ <- 0.5
# Sample sizes
var_size <- 10000
sim_size <- 100000
sample_size <- 100
# Simulate random variables
X <- exp(rnorm(var_size,muX,sdX))
Y <- exp(rnorm(var_size,muY,sdY))
Z <- exp(rnorm(var_size,muZ,sdZ))
# Plot pdf for three different parameters
hist(X, breaks = var_size/50)
hist(Y, breaks = var_size/50)
hist(Z, breaks = var_size/50)
muA <- 2.5
sdA <- 0.6
A <- exp(rnorm(var_size,muA,sdA))
hist(A, breaks = var_size/50)
sample(X, size=sample_size, replace=TRUE) -> rt.sample
sample(X, size=sample_size, replace=TRUE) -> sampleX
hist(sampleX, breaks = var_size/50)
sampleX
# Simulate random variables
X <- rmultinom(var_size,5,c(1/5,1/5,1/5,1/5,1/5))
install.packages(c("bayesplot", "bayestestR", "BH", "blob", "brms", "Brobdingnag", "broom", "bslib", "callr", "checkmate", "class", "cli", "clipr", "cluster", "colorspace", "commonmark", "crayon", "datawizard", "DBI", "dbplyr", "desc", "dfidx", "distributional", "dplyr", "DT", "dtplyr", "estimability", "evaluate", "fansi", "farver", "fontawesome", "forcats", "foreign", "future", "generics", "ggdist", "ggplot2", "globals", "glue", "googlesheets4", "gplots", "gtable", "gtools", "haven", "hms", "htmltools", "httpuv", "httr", "igraph", "insight", "jsonlite", "knitr", "lme4", "lmtest", "loo", "magrittr", "MASS", "Matrix", "matrixStats", "mgcv", "mnormt", "modelr", "nleqslv", "nlme", "nloptr", "nnet", "openssl", "optimx", "packrat", "parallelly", "pillar", "pkgbuild", "plyr", "posterior", "processx", "projpred", "ps", "psych", "rbibutils", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "Rdpack", "readr", "readxl", "reprex", "rjags", "rlang", "rmarkdown", "Rmisc", "rpart", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "sass", "scales", "shiny", "shinyjs", "shinystan", "spatial", "statmod", "stringi", "stringr", "survival", "tibble", "tidybayes", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "uuid", "V8", "vctrs", "viridisLite", "withr", "xfun", "yaml", "zoo"))
version
install.packages("lme4")
R version
R.version
# load required packages
library(tidyverse)
library(tidybayes)
library(brms)
library(emmeans)
library(lme4)
library(lmerTest)
library(xtable)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load helper functions
source('../../../helpers.R')
# load helper functions
source('../../../helpers.R')
# load helper functions
source('../../../../helpers.R')
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
nrow(d)
length(unique(d$participantID)) #71 participants
# exclude controls
t = d %>%
filter(!(expression == "controlBad" | expression == "controlGood"))
table(t$expression)
# set reference level
t = t %>%
mutate(expression = fct_relevel(expression, "be right"))
levels(t$expression)
# response distribution before transformation
summary(t$response)
# first, because response assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (nâˆ’1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
t$betaresponse = (t$response*(nrow(t)-1) + .5)/nrow(t)
summary(t$betaresponse)
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
# set priors
priors = c(set_prior("cauchy(0, .001)", class = "b"))
# for prior predictive check
prior.check = brm(betaresponse ~ expression + (1|participantID) + (1|cc),
data=t,
prior = priors,
iter = 7000,
control = list(adapt_delta = .97, max_treedepth=20),
sample_prior = "only")
# for prior predictive check
prior.check = brm(betaresponse ~ expression + (1|participantID) + (1|cc),
data=t,
prior = priors,
iter = 7000,
control = list(adapt_delta = .97, max_treedepth=20),
sample_prior = "only")
