ylab("Mean naturalness ratings \n (higher rating = more at-issue)") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #74 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean 'asking whether' rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean 'asking whether' rating \n (higher rating = more at-issue)") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('../../../helpers.R')
# load required packages for pre-processing data
library(tidyverse)
theme_set(theme_bw())
# read in the raw data
d = read_csv("../data/combined.csv")
# remove rows with info about instructions and final screens
d <- d %>% filter(!(trial_type %in% c("survey-text", "html-button-response")))
# replace participant_id by random number
length(unique(d$participant_id)) #80
d$participantID <- match(d$participant_id, unique(sort(d$participant_id)))
# how many participants?
length(unique(d$participantID)) #80
# select relevant columns
d = d %>%
select(c(stimulus, response, trial_index, trial_type, participantID))
# unpack demographics info
dg <- d %>%
filter(trial_type == "survey") %>%
select(c(participantID,response))
table(dg$response)
# age
dg$age = as.numeric(gsub("\\D", "", dg$response))
table(dg$age)
mean(dg[dg$age < 100,]$age) # exclude participant who entered 372 from mean calculation
# gender
dg$gender = case_when(grepl("female", dg$response) ~ "female",
grepl("male", dg$response) ~ "male",
grepl("non-binary", dg$response) ~ "non-binary",
TRUE ~ "preferNoToSay")
table(dg$gender)
# language
dg$language = case_when(grepl("language\":\"yes", dg$response) ~ "English",
TRUE ~ "notSpeakerOfEnglish")
table(dg$language)
# American English
dg$amE = case_when(grepl("amE\":\"yes", dg$response) ~ "AmE",
TRUE ~ "notAmE")
table(dg$amE)
# comments
dg$comments = gsub(".*comments", "", dg$response)
table(dg$comments)
# remove response column from demographics data
dg = dg %>%
select(-c(response))
summary(dg)
# add demographics data back to data
d = left_join(d, dg, by = "participantID")
# remove unneeded columns from data
d = d %>%
filter(trial_type != "survey")
d = d %>%
select(-c(trial_index,trial_type))
# make response a numeric column, with values between 0 and 1
summary(d$response)
d$response <- as.numeric(d$response)
d$response <- d$response/100
table(d$response)
# create useful columns
d$expression <- case_when(
grepl("right", d$stimulus) ~ "be right",
grepl("know", d$stimulus) ~ "know",
grepl("discover", d$stimulus) ~ "discover",
grepl("confirm", d$stimulus) ~ "confirm",
grepl("confess", d$stimulus) ~ "confess",
grepl("French course", d$stimulus) ~ "controlGood",
grepl("like apples", d$stimulus) ~ "controlBad",
grepl("found Jack|criticized|manager|forgave|chef|boss|neighbor", d$stimulus) ~ "final NRRC",
grepl("ran away|feels guilty|caught by the police|sweet tooth|apologized|feels upset|driver's license", d$stimulus) ~ "medial NRRC",
TRUE ~ "ERROR"
)
table(d$expression)
# items
d$cc = case_when(grepl("saw the murder", d$stimulus) ~ "saw the murder",
grepl("cheated on his wife", d$stimulus) ~ "cheated on his wife",
grepl("stole the money", d$stimulus) ~ "stole the money",
grepl("ate the last cupcake", d$stimulus) ~ "ate the last cupcake",
grepl("broke the plate", d$stimulus) ~ "broke the plate",
grepl("lost his key", d$stimulus) ~ "lost his key",
grepl("bought a new car", d$stimulus) ~ "bought a new car",
grepl("French course", d$stimulus) ~ "control",
grepl("like apples",d$stimulus) ~ "control",
TRUE ~ "ERROR")
table(d$cc)
# remove stimulus column now that everything has been extracted from it
d = d %>%
select(-c(stimulus))
# check that all predicates and all contents are being presented to participants
table(d$expression)
table(d$cc)
table(d$expression, d$cc)
# participant info
table(d$age) #18-372
length(which(is.na(d$age))) # 0 missing values
# exclude outliers (0, 3330) before calculating mean
mean(d[17 < d$age & d$age < 80,]$age,na.rm=TRUE) #39.13
d %>%
select(gender, participantID) %>%
unique() %>%
group_by(gender) %>%
summarize(count=n())
### exclude non-English speakers and non-American English speakers
# exclude non-English speakers
length(which(is.na(d$language))) #no missing responses
table(d$language) #all the participants are English native speakers
d <- d %>%
filter(language != "notSpeakerOfEnglish") %>%  droplevels()
length(unique(d$participantID)) #80 #0 participants excluded
# exclude non-American English speakers
length(which(is.na(d$amE))) #0 (everybody responded)
table(d$amE)
d <- d %>%
filter(amE != "notAmE") %>%  droplevels()
length(unique(d$participantID)) #78 #2 participants excluded
# exclude participants based on controls
names(d)
table(d$expression)
# plot response by type of control
ggplot(data=d[d$expression == "controlGood",], aes(x=participantID, y=response)) +
geom_point()
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #71 participants
# exclude controls
t = d %>%
filter(!(expression == "controlBad" | expression == "controlGood"))
table(t$expression)
# code response such that 1 = at-issue and 0 = not-at-issue
d$response = 1-d$response
table(d$response)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean naturalness rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
View(d)
table(d$response)
# code response such that 1 = at-issue and 0 = not-at-issue
d$response = 1-d$response
table(d$response)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean naturalness rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #71 participants
# exclude controls
t = d %>%
filter(!(expression == "controlBad" | expression == "controlGood"))
table(t$expression)
# code response such that 1 = at-issue and 0 = not-at-issue
t$response = 1-t$response
table(t$response)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean naturalness rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean naturalness rating \n (higher rating = more at-issue)") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #72 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# code response such that 1 = at-issue and 0 = not-at-issue
t = t %>%
mutate(nResponse = ifelse(choice == "No", 1, 0))
table(d$nResponse)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(nResponse), CILow = ci.low(nResponse), CIHigh = ci.high(nResponse)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #72 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# code response such that 1 = at-issue and 0 = not-at-issue
table(d$nResponse)
t = t %>%
mutate(nResponse = ifelse(choice == "No", 1, 0))
table(d$nResponse)
Yes but test
Yes but test
Yes but test
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
length(unique(d$participantID)) #72 participants
# exclude controls
t = d %>%
filter(!(expression == "AI MC" | expression == "NAI MC"))
table(t$expression)
# code response such that 1 = at-issue and 0 = not-at-issue
table(d$nResponse)
t = t %>%
mutate(nResponse = ifelse(choice == "No", 1, 0))
table(d$nResponse)
# mean rating by expression
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(nResponse), CILow = ci.low(nResponse), CIHigh = ci.high(nResponse)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=t, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" choice \n (higher response = more not-at-issue") +
xlab("Expression")
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_jitter(data=t, aes(x=expression,y=nResponse), alpha = .2, width=.2, height=.2) +
geom_point(size=3,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(-0.2,1.2),breaks = c(0,0.2,0.4,0.6,0.8,1)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Proportion of \"no\" choice \n (higher response = more at-issue") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/data_preprocessed.csv")
summary(d)
length(unique(d$workerid)) #242 participants
# exclude controls and projection ratings
table(d$trigger)
t = d %>%
filter(!(trigger == "MC")) %>%
filter(!(question_type == "projective"))
table(t$trigger)
# rename trigger into expression
t$expression = t$trigger
# code response such that 1 = at-issue and 0 = not-at-issue
t$response = 1-t$response
View(t)
table(t$response)
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean 'asking whether' rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# load helper functions
source('../../helpers.R')
# load cleaned data
d = read_csv("../data/data_preprocessed.csv")
summary(d)
length(unique(d$workerid)) #220 participants
# exclude controls and projection ratings
table(d$trigger)
t = d %>%
filter(!(trigger == "MC")) %>%
filter(!(question_type == "projective"))
table(t$trigger)
# rename trigger into expression
t$expression = t$trigger
# code response such that 1 = at-issue and 0 = not-at-issue
t$response = 1-t$response
table(t$response)
means = t %>%
group_by(expression) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh, expression = fct_reorder(as.factor(expression),Mean))
means
# range
min(means$Mean)
max(means$Mean)
max(means$Mean) - min(means$Mean)
# plot
ggplot(data=means, aes(x=expression, y=Mean)) +
geom_violin(data=t, aes(x=expression, y=response), scale="width", fill = "grey", linewidth=0, alpha=.4) +
geom_point(size=2.5,color="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.1,color="black") +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0)) +
theme(text = element_text(size=12), axis.text.x = element_text(size = 12, angle = 45, hjust = 1)) +
theme(legend.position="none") +
theme(panel.grid.major.x = element_blank()) +
ylab("Mean 'direct dissent' rating \n (higher rating = more not-at-issue)") +
xlab("Expression")
ggsave("../graphs/mean-ratings.pdf",height=4.5,width=7)
