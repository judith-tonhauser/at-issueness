.26 * (-15)
(.26 * (-15)) + (.74 * 5)
R.Version()
pbinom(507,111,.2)
pnorm(700, mean=507, sd=111)
pnorm(700,507,111)
1-pnorm(700,507,111)
pnorm(65,mean=65,sd=2.8)
pnorm(65,mean=69,sd=2.8)
1-pnorm(75,69,2.8)
pnorm(72,69,2.8)-(1-pnorm(66,69,2.8))
pnorm(72,69,2.8)
pnorm(66,69,2.8)
pnorm(75,69,2.8)
pnorm(72,69,2.8)
pnorm(66,69,2.8)
1-pnorm(66,69,2.8)
pnorm(72,69,2.8)-(1-pnorm(66,69,2.8))
pnorm(72,69,2.8)
1-pnorm(66,69,2.8)
pnorm(72,69,2.8)
pnorm(66,69,2.8)
1-pnorm(66,69,2.8)
1-pnorm(75,69,2.8)
pnorm(65,mean=69,sd=2.8)
pnorm(72,69,2.8)-pnorm(66,69,2.8)
qnorm(0.98, mean=507, sd=111)
help(pnorm)
qnorm(.005,69,2.8)
1-qnorm(.0025,69,2.8)
qnorm(.9975,69,2.8)
qnorm(.9975,69,2.8)
qnorm(.005,69,2.8)
qnorm(.9975,69,2.8)
pnorm(8,20,.5)
pnorm(8,20,2.24)
pnorm(30.5,22.5,sd=4.5)
1 - pnorm(30.5,22.5,sd=4.5)
library(jsonlite)
library(tidyverse)
library(rwebppl)
install.packages("rwebppl")
library(jsonlite)
library(tidyverse)
library(rwebppl)
install.packages("rwebppl")
R.Version()
R.Version()
R.Version()
R.version()
R. Version()
R.Version()
# load required packages
library(tidyverse)
library(tidybayes)
library(brms)
library(emmeans)
library(lme4)
library(lmerTest)
library(xtable)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load helper functions
source('../../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
nrow(d)
length(unique(d$participantID)) #71 participants
# exclude controls
t = d %>%
filter(!(expression == "controlBad" | expression == "controlGood"))
table(t$expression)
# set reference level
t = t %>%
mutate(expression = fct_relevel(expression, "be right"))
levels(t$expression)
# response distribution before transformation
summary(t$response)
# first, because response assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (nâˆ’1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
t$betaresponse = (t$response*(nrow(t)-1) + .5)/nrow(t)
summary(t$betaresponse)
# fit the model
prior = get_prior(betaresponse ~ expression + (1|participantID) + (1|cc),family = Beta(),data=t)
prior
# set priors
priors = c(set_prior("cauchy(0, .001)", class = "b"))
prior
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
prior = priors,
center = FALSE,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .95, max_treedepth=15))
betamodel = bf(betaresponse ~ expression + (1|participantID) + (1|cc),
phi ~ expression + (1|participantID) + (1|cc), # beta distribution's precision
family = Beta(),
center = FALSE)
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
prior = priors,
cores = 4, iter = 3000, warmup = 500,
control = list(adapt_delta = .95, max_treedepth=15))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/bayesian-model.rds")
# read the model
m.b <- readRDS(file="../models/bayesian-model.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "expression", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# draws of posterior distributions of estimated marginal means of pairwise differences
pairwise <- m.b %>%
emmeans(~ expression) %>%
contrast(method = "pairwise") %>%
gather_emmeans_draws() %>%
mean_hdi() %>%
# create new column of "first" and "second" element in contrast
mutate(first = gsub(" -.*", "", contrast)) %>%
mutate(second = gsub(".* -", "", contrast)) %>%
# sort by mean value
mutate(contrast = fct_reorder(as.factor(contrast),.value))
pairwise
# save the pairwise comparison
write_csv(pairwise,file="../models/pairwise1.csv")
# load the pairwise comparison
pairwise = read_csv(file="../models/pairwise1.csv")
pairwise
# select relevant columns for printing
pairwise_reduced = pairwise %>%
select(c(contrast, .value, .lower, .upper))
pairwise_reduced
tableApp1 = print(xtable(pairwise_reduced),
#only.contents = T,
include.rownames=FALSE,
include.colnames=TRUE,
tabular.environment="longtable",
floating=FALSE,
hline.after = NULL,
latex.environments=NULL,
booktabs=TRUE,
sanitize.text.function = function(x){x},
comment = F
)
tableApp1
# write the table, print in latex document in supplement
write(tableApp1, "../models/fullModelOutput.tex")
# select needed columns from the pairwise comparison for the table input
tableInput = pairwise %>%
select(c(contrast, .value, .lower, .upper, first, second)) %>%
select(-c(contrast))
tableInput$second = trimws(tableInput$second)
tableInput
# create separate dataframes for each expression
predicates = unique(as.character(t$expression))
predicates
# make tableInput a dataframe
tableInput <- as.data.frame(tableInput)
tableInput
# create a separate dataframe for each predicate
for (p in predicates) {
assign(paste("data.", p, sep=""), subset(tableInput, tableInput$first == p | tableInput$second == p))
assign(paste("data.", p, sep=""), get(paste("data.", p, sep="")) %>% mutate(expression = c(p)))
write(paste("data.",p,sep=""),file=paste("../models/data.",p,sep=""))
}
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
exp2 = read.csv("../../exp2/data/cd.csv")
nrow(exp2)
means.exp2 = exp2 %>%
filter(!(expression == "AI MC" | expression == "NAI MC")) %>%
group_by(expression) %>%
summarize(Mean.exp2 = mean(response))
means.exp2
tableData$expression = factor(tableData$expression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
tableData
levels(tableData$expression)
# join the tmp dataframe with tableData
tableData = left_join(tableData, means.exp2)
tableData
# also sort the other header row by Exp 2 means
tableData$comparisonExpression = factor(tableData$comparisonExpression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
# sort by mean (first column) and comparisonExpression (second column)
tableData <- tableData %>% arrange(Mean.exp2, comparisonExpression)
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & tableData$value <= -1.5, "\\cellcolor{gray}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -1.5 < tableData$value & tableData$value <= -0.5, "\\cellcolor{gray}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -.5 < tableData$value & tableData$value <= 0, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & tableData$value >= 1.5, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & 1.5 > tableData$value & tableData$value > 0.5, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & .5 > tableData$value & tableData$value >= 0, "\\cellcolor{gray}", "error")))))))
tableData$cellColor
# select relevant columns to make the latex table
tableData = tableData %>%
select(c(expression,comparisonExpression,cellColor))
tableData
# spread the data wide
tableData = tableData %>%
spread(comparisonExpression,cellColor)
write(table1, "../models/table1.tex")
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
exp2 = read.csv("../../exp2/data/cd.csv")
nrow(exp2)
exp2 = read.csv("../../exp2/data/cd.csv")
nrow(exp2)
means.exp2 = exp2 %>%
filter(!(expression == "AI MC" | expression == "NAI MC")) %>%
group_by(expression) %>%
summarize(Mean.exp2 = mean(response))
means.exp2
tableData$expression = factor(tableData$expression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
tableData
levels(tableData$expression)
# join the tmp dataframe with tableData
tableData = left_join(tableData, means.exp2)
tableData
# also sort the other header row by Exp 2 means
tableData$comparisonExpression = factor(tableData$comparisonExpression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
# sort by mean (first column) and comparisonExpression (second column)
tableData <- tableData %>% arrange(Mean.exp2, comparisonExpression)
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & tableData$value <= -1.5, "\\cellcolor{gray}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -1.5 < tableData$value & tableData$value <= -0.5, "\\cellcolor{gray}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -.5 < tableData$value & tableData$value <= 0, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & tableData$value >= 1.5, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & 1.5 > tableData$value & tableData$value > 0.5, "\\cellcolor{gray}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & .5 > tableData$value & tableData$value >= 0, "\\cellcolor{gray}", "error")))))))
tableData$cellColor
tableData
tableData$cellColor
tableData
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & tableData$value <= -1.5, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -1.5 < tableData$value & tableData$value <= -0.5, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0 & -.5 < tableData$value & tableData$value <= 0, "\\cellcolor{blue}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & tableData$value >= 1.5, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & 1.5 > tableData$value & tableData$value > 0.5, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0 & .5 > tableData$value & tableData$value >= 0, "\\cellcolor{red}", "error")))))))
tableData$cellColor
tableData
tableData$cellColor
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}", "error")))))))
tableData$cellColor
# select relevant columns to make the latex table
tableData = tableData %>%
select(c(expression,comparisonExpression,cellColor))
tableData
# spread the data wide
tableData = tableData %>%
spread(comparisonExpression,cellColor)
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
exp2 = read.csv("../../exp2/data/cd.csv")
nrow(exp2)
means.exp2 = exp2 %>%
filter(!(expression == "AI MC" | expression == "NAI MC")) %>%
group_by(expression) %>%
summarize(Mean.exp2 = mean(response))
means.exp2
tableData$expression = factor(tableData$expression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
tableData
levels(tableData$expression)
# join the tmp dataframe with tableData
tableData = left_join(tableData, means.exp2)
tableData
# also sort the other header row by Exp 2 means
tableData$comparisonExpression = factor(tableData$comparisonExpression, levels=means.exp2$expression[order(means.exp2$Mean.exp2)], ordered=TRUE)
# sort by mean (first column) and comparisonExpression (second column)
tableData <- tableData %>% arrange(Mean.exp2, comparisonExpression)
tableData
tableData$cellColor = ifelse(tableData$lower <= 0 & tableData$upper >= 0, "\\cellcolor{white}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower < 0 & tableData$upper < 0, "\\cellcolor{blue}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}",
ifelse(tableData$lower > 0 & tableData$upper > 0, "\\cellcolor{red}", "error")))))))
tableData$cellColor
# select relevant columns to make the latex table
tableData = tableData %>%
select(c(expression,comparisonExpression,cellColor))
tableData
# spread the data wide
tableData = tableData %>%
spread(comparisonExpression,cellColor)
# create a tableData dataframe
tableData = data.frame(expression = character(), comparisonExpression = character(), value = numeric(), lower = numeric(), upper = numeric())
tableData
# fill tableData with the relevant information from the individual predicates' dataframes
for (p in predicates) {
for (i in 1:nrow(get(paste("data.",p,sep="")))) {
print(p)
# define some expressions
valueOld = get(paste("data.",p,sep=""))[i,]$.value
lowerOld = get(paste("data.",p,sep=""))[i,]$.lower
upperOld = get(paste("data.",p,sep=""))[i,]$.upper
first = get(paste("data.",p,sep=""))[i,]$first
second = get(paste("data.",p,sep=""))[i,]$second
expression = get(paste("data.",p,sep=""))[i,]$expression
# now fill the dataframe
comparisonExpression = ifelse(expression == first, second, first)
value = ifelse(expression == first, valueOld, -valueOld)
lower = ifelse(expression == first, lowerOld, -upperOld)
upper = ifelse(expression == first, upperOld, -lowerOld)
tableData = tableData %>%
add_row(expression = p, comparisonExpression = comparisonExpression, value = value, lower = lower, upper = upper)
}
}
tableData
tableData
pairwise
print(n=50, pairwise)
# read the model
m.b <- readRDS(file="../models/bayesian-model.rds")
m.b
# draws of posterior distributions of estimated marginal means of pairwise differences
pairwise <- m.b %>%
emmeans(~ expression) %>%
contrast(method = "pairwise") %>%
gather_emmeans_draws() %>%
mean_hdi() %>%
# create new column of "first" and "second" element in contrast
mutate(first = gsub(" -.*", "", contrast)) %>%
mutate(second = gsub(".* -", "", contrast)) %>%
# sort by mean value
mutate(contrast = fct_reorder(as.factor(contrast),.value))
pairwise
pairwise <- m.b %>%
emmeans(~ expression) %>%
contrast(method = "pairwise") %>%
gather_emmeans_draws() %>%
mean_hdi()
pairwise
# read the model
m.b <- readRDS(file="../models/bayesian-model.rds")
m.b
names(m.b)
pairwise <- m.b %>%
emmeans(~ expression)
pairwise
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load helper functions
source('../../../helpers.R')
# load cleaned data
d = read_csv("../data/cd.csv")
nrow(d)
length(unique(d$participantID)) #71 participants
# exclude controls
t = d %>%
filter(!(expression == "controlBad" | expression == "controlGood"))
table(t$expression)
# set reference level
t = t %>%
mutate(expression = fct_relevel(expression, "be right"))
levels(t$expression)
item
m = lmer(response ~ expression + (1|participantID) + (1|content), data=t, REML=F)
names(t)
m = lmer(response ~ expression + (1|participantID) + (1|cc), data=t, REML=F)
m
m = lmer(response ~ expression + (1|participantID) + (1|cc), data=t, REML=F)
m
m = lmer(response ~ expression + (1|participantID) + (1|cc), data=t, REML=F)
m
m = lm(response ~ expression, data=t, REML=F)
m
m = lm(response ~ expression, data=t)
m
pc = emmeans(m, pairwise ~ expression)
pc
pairwise = pc
# select needed columns from the pairwise comparison for the table input
tableInput = pairwise %>%
select(c(contrast, .value, .lower, .upper, first, second)) %>%
select(-c(contrast))
tableInput$second = trimws(tableInput$second)
pc
