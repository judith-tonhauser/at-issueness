tmp.ai = ai.means %>%
rename(AIMean="Mean",AIYMin="YMin",AIYMax="YMax",VG = "VeridicalityGroup")
# combine at-issueness and projection means
tmp.ai = ai.means %>%
rename(AIMean="Mean",AIYMin="YMin",AIYMax="YMax",VG = "VeridicalityGroup")
tmp.proj = proj.means %>%
rename(ProjMean="Mean",ProjYMin="YMin",ProjYMax="YMax")
toplot = tmp.ai %>%
left_join(tmp.proj, by=c("short_trigger")) %>%
rename(VeridicalityGroup.x="VeridicalityGroup")
toplot = tmp.ai %>%
left_join(tmp.proj, by=c("short_trigger"))
head(toplot)
toplot
head(toplot)
# toplot already has VeridicalityGroup, just need to define colors
cols = data.frame(V=levels(toplot$short_trigger))
cols
toplot$short_trigger
# toplot already has VeridicalityGroup, just need to define colors
cols = data.frame(V=levels(as.factor(toplot$short_trigger)))
cols
cols$VeridicalityGroup = as.factor(
ifelse(cols$V %in% c("know", "discover", "reveal", "see", "be_annoyed"), "F",
ifelse(cols$V %in% c("pretend", "think", "suggest", "say"), "NF",
ifelse(cols$V %in% c("be_right","demonstrate"),"VNF",
ifelse(cols$V %in% c("MC"),"MC","V")))))
levels(cols$V)
cols$V <- factor(cols$V, levels = cols[order(as.character(proj.means$verb)),]$V, ordered = TRUE)
cols$Colors =  ifelse(cols$VeridicalityGroup == "F", "darkorchid",
ifelse(cols$VeridicalityGroup == "NF", "gray60",
ifelse(cols$VeridicalityGroup == "VNF","dodgerblue",
ifelse(cols$VeridicalityGroup == "MC","black","tomato1"))))
cols$Colors
cols$V <- factor(cols$V, levels = cols[order(as.character(proj.means$verb)),]$V, ordered = TRUE)
levels(cols$V)
toplot$short_trigger <- factor(toplot$short_trigger, levels = toplot[order(as.character(proj.means$verb)),]$short_trigger, ordered = TRUE)
levels(toplot$short_trigger)
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point() +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=c("darkorchid","black","gray60","tomato1","dodgerblue")) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black")
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black",fill=c("darkorchid","black","gray60","tomato1","dodgerblue"))
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black",fill=VeridicalityGroup)
toplot
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=c("darkorchid","black","gray60","tomato1","dodgerblue")) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
fill_cols = c("darkorchid","black","gray60","tomato1","dodgerblue","darkorchid","black","gray60","tomato1","dodgerblue","darkorchid","black","gray60","tomato1","dodgerblue","darkorchid","black","gray60","tomato1","dodgerblue","black")
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_color_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ill_cols = c("darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue","black")
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_color_manual(values=fill_cols)
fill_cols = c("darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue",
"darkorchid","black","gray60","tomato1","dodgerblue","black")
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black",fill=VeridicalityGroup) +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean,fill=VeridicalityGroup)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black",fill=VeridicalityGroup) +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean,fill=VeridicalityGroup)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean,fill=VeridicalityGroup)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax))
ggplot(toplot, aes(x=AIMean,y=ProjMean,fill=VeridicalityGroup)) +
geom_text_repel(aes(label=short_trigger),color=cols$Colors,alpha=1,size=4) +
geom_point(shape=21,stroke=.5,size=2.5,color="black") +
scale_fill_manual(values=fill_cols) +
geom_abline(intercept=0,slope=1,linetype="dashed",color="gray60") +
geom_errorbar(aes(ymin=ProjYMin,ymax=ProjYMax)) +
geom_errorbarh(aes(xmin=AIYMin,xmax=AIYMax)) +
guides(fill=FALSE) +
ylab("Mean not-at-issueness rating") +
xlab("Mean projectivity rating")
ggsave("../graphs/projectivity-by-at-issueness.pdf",height=4,width=7)
ggsave("../graphs/mean-projectivity-by-at-issueness.pdf",height=4,width=4)
ggsave("../graphs/mean-projectivity-by-at-issueness.pdf",height=5,width=5)
# correlation between at-issueness and projectivity by predicate:
cor(toplot$AIMean,toplot$ProjMean)
# correlation between at-issueness and projectivity by predicate/content combination
means = t %>%
group_by(short_trigger, content) %>%
summarize(AIMean = mean(ai), ProjMean = mean(projective))
means
means
cor(means$AIMean,means$ProjMean)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
require(tidyverse)
library(ggrepel)
library(lsmeans)
library(lme4)
library(lmerTest)
# load helper functions
source('../../helpers.R')
# load data
d = read.csv("../data/data_preprocessed.csv")
nrow(d)
13520/260
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc)
5200/260
nrow(t)
6760/260
# center the block and at-issueness variables
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
t_nomc
summary(t_nomc)
# the model reported in the paper
m.mr.1 = lmer(projective ~ cai * cblock_ai + (1+cai|workerid) + (0+cai|content) + (1+cai|short_trigger), data=t_nomc, REML=F)
summary(m.mr.1)
summary(m.mr.1)
# get p-values via likelihood ratio tests
m.mr.0a = lmer(projective ~ cai + cblock_ai + (1+cai|workerid) + (0+cai|content) + (1+cai|short_trigger), data=t_nomc, REML=F)
summary(m.mr.0a)
m.mr.0b = lmer(projective ~ cai + cai : cblock_ai + (1+cai|workerid) + (0+cai|content) + (1+cai|short_trigger), data=t_nomc, REML=F)
summary(m.mr.0b)
m.mr.0c = lmer(projective ~ cblock_ai + cai : cblock_ai + (1+cai|workerid) + (0+cai|content) + (1+cai|short_trigger), data=t_nomc, REML=F)
summary(m.mr.0c)
anova(m.mr.0a,m.mr.1) #p-value for interaction
anova(m.mr.0b,m.mr.1) #p-value for block
anova(m.mr.0c,m.mr.1) #p-value for at-issueness:
# simple effects for interaction interpretation
m.mr.simple = lmer(projective ~ ai * block_ai - ai + (1+cai|workerid) + (0+cai|content) + (1+cai|short_trigger), data=t_nomc, REML=F)
summary(m.mr.simple)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1+short_trigger|workerid) + (1+short_trigger|content), data=t_nomc, REML=F)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1+short_trigger|workerid) + (1|content), data=t_nomc, REML=F)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, revpairwise~short_trigger, adjust="tukey")
pc
pc
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = cols[order(as.character(proj.means$short_trigger)),]$short_trigger, ordered = TRUE)
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
head(t_nomc)
d = read.csv("../data/data_preprocessed.csv")
nrow(d) #13520 / 260 Turkers = 52 trials
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
nrow(t) #6760 / 260 = 26 items per Turker
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc)
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
summary(t_nomc)
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj.means$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj.means$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
order(as.character(proj.means$short_trigger))
proj.means = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
proj.means
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, revpairwise~short_trigger, adjust="tukey")
pc
pc
levels(t_nomc$short_trigger)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
proj.means = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(verb = fct_reorder(as.factor(short_trigger),Mean))
proj.means
levels(t_nomc$verb)
proj.means = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(verb = fct_reorder(as.factor(short_trigger),Mean))
proj.means
levels(t_nomc$verb)
# analysis file for experiment investigating whether at-issueness predicts projection
# for the contents of the complements of 20 predicates
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
require(tidyverse)
library(ggrepel)
library(lsmeans)
library(lme4)
library(lmerTest)
# load helper functions
source('../../helpers.R')
# load data
d = read.csv("../data/data_preprocessed.csv")
nrow(d) #13520 / 260 Turkers = 52 trials
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
nrow(t) #6760 / 260 = 26 items per Turker
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc) #5200 / 260 = 20 target items
# center the block and at-issueness variables
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
summary(t_nomc)
proj.means = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(verb = fct_reorder(as.factor(short_trigger),Mean))
proj.means
levels(t_nomc$verb)
levels(t_nomc$short_trigger)
proj.means = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj.means
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj.means$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger)
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger)
t_nomc$short_trigger2 <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger2)
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj
levels(t_nomc$short_trigger)
order(as.character(proj$short_trigger))
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger)
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, revpairwise~short_trigger, adjust="tukey")
pc
pc
# analysis file for experiment investigating whether at-issueness predicts projection
# for the contents of the complements of 20 predicates
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
require(tidyverse)
library(ggrepel)
library(lsmeans)
library(lme4)
library(lmerTest)
# load helper functions
source('../../helpers.R')
# load data
d = read.csv("../data/data_preprocessed.csv")
nrow(d) #13520 / 260 Turkers = 52 trials
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
nrow(t) #6760 / 260 = 26 items per Turker
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc) #5200 / 260 = 20 target items
# center the block and at-issueness variables
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
summary(t_nomc)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
levels(t_nomc$short_trigger)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(as.character(proj$short_trigger)),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger)
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = t_nomc[order(proj$short_trigger),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger)
# analysis file for experiment investigating whether at-issueness predicts projection
# for the contents of the complements of 20 predicates
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
require(tidyverse)
library(ggrepel)
library(lsmeans)
library(lme4)
library(lmerTest)
# load helper functions
source('../../helpers.R')
# load data
d = read.csv("../data/data_preprocessed.csv")
nrow(d) #13520 / 260 Turkers = 52 trials
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
nrow(t) #6760 / 260 = 26 items per Turker
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc) #5200 / 260 = 20 target items
# center the block and at-issueness variables
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
summary(t_nomc)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
levels(t_nomc$short_trigger)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj
t_nomc$short_trigger2 <- factor(t_nomc$short_trigger, levels = t_nomc[order(proj$short_trigger),]$short_trigger, ordered = TRUE)
head(t_nomc)
levels(t_nomc$short_trigger2)
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, revpairwise~short_trigger, adjust="tukey")
pc
pc = lsmeans(m.mr.fixedtrigger, pairwise~short_trigger, adjust="tukey")
pc
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
levels(t_nomc$short_trigger)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective))
proj
proj
t_nomc$short_trigger <- factor(t_nomc$short_trigger,
levels = t_nomc[order(as.character(proj$short_trigger)),]$short_trigger, ordered = TRUE)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
levels(t_nomc$short_trigger)
proj$short_trigger
as.character(proj$short_trigger)
order(as.character(proj$short_trigger))
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, pairwise~short_trigger, adjust="tukey")
pc
levels(proj$short_trigger)
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
proj
levels(proj$short_trigger)
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = unique(levels(proj$short_trigger)))
# model
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid) + (1|content), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, pairwise~short_trigger, adjust="tukey")
pc
# analysis file for experiment investigating whether at-issueness predicts projection
# for the contents of the complements of 20 predicates
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
require(tidyverse)
library(ggrepel)
library(lsmeans)
library(lme4)
library(lmerTest)
# load helper functions
source('../../helpers.R')
# load data
d = read.csv("../data/data_preprocessed.csv")
nrow(d) #13520 / 260 Turkers = 52 trials
# spread responses over separate columns for projectivity and at-issueness
t = d %>%
mutate(block_ai = as.factor(ifelse(question_type == "ai", ifelse(block == "block1", "block1", "block2"), ifelse(block == "block1", "block2", "block1")))) %>%
select(workerid,content,short_trigger,question_type,response,block_ai) %>%
spread(question_type,response)
nrow(t) #6760 / 260 = 26 items per Turker
# exclude main clause controls
t_nomc = droplevels(subset(t, short_trigger != "MC"))
nrow(t_nomc) #5200 / 260 = 20 target items
# center the block and at-issueness variables
t_nomc = cbind(t_nomc,myCenter(t_nomc[,c("block_ai","ai")]))
summary(t_nomc)
# pairwise comparisons of projectivity of the predicates using tukey
# run the model again with short_trigger as fixed effect
# no at-issueness or block effects
levels(t_nomc$short_trigger)
# order short_trigger so that comparison is presented by projectivity mean, not alphabetically
proj = t_nomc %>%
group_by(short_trigger) %>%
summarize(Mean = mean(projective)) %>%
mutate(short_trigger = fct_reorder(as.factor(short_trigger),Mean))
proj
levels(proj$short_trigger)
t_nomc$short_trigger <- factor(t_nomc$short_trigger, levels = unique(levels(proj$short_trigger)))
levels(t_nomc$short_trigger)
# model (why don't we have a random effect for content here?)
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid), data=t_nomc, REML=F)
pc = lsmeans(m.mr.fixedtrigger, pairwise~short_trigger, adjust="tukey")
pc
options(max.print=10000)
pc
# model (why don't we have a random effect for content here?)
m.mr.fixedtrigger = lmer(projective ~ short_trigger + (1|workerid), data=t_nomc, REML=F)
summary(m.mr.fixedtrigger)
# how long did the experiment take?
summary(d)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
20/4
